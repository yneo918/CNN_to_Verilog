OUTPUT_FILE.write("module top\n")
OUTPUT_FILE.write("	(x, z, clk, en_in, en_out, ctrl);\n")
OUTPUT_FILE.write("	localparam WIDTH = 8, C = 1, H = 28;\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("	input clk, en_out, ctrl;\n")
OUTPUT_FILE.write("	input en_in[0:C-1][0:H-1];\n")
OUTPUT_FILE.write("	input [WIDTH-1:0] x;\n")
OUTPUT_FILE.write("	output [WIDTH-1:0] z;\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("	internal_io #(.WIDTH(WIDTH), .IN(IN), .OUT(OUT)) IO(.x(x), .z(z), .clk(clk), .en_in(en_in), .en_out(en_out), .ctrl(ctrl));\n")
OUTPUT_FILE.write("endmodule\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("module internal_io\n")
OUTPUT_FILE.write("	#(parameter WIDTH = 8)\n")
OUTPUT_FILE.write("	localparam MID = 10, H = 28, W = 28, C = 1;\n")
OUTPUT_FILE.write("	(x, z, clk, en_in, en_out, ctrl);\n")
OUTPUT_FILE.write("	input clk, en_out, ctrl;\n")
OUTPUT_FILE.write("	input en_in[0:CIN-1][0:H-1];\n")
OUTPUT_FILE.write("	input [WIDTH-1:0] x;\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] xx[0:CIN-1][0:H-1][0:W-1];\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] x_conv[0:CIN-1][0:H-1][0:W-1];\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] z_conv[0:COUT-1][0:H-5][0:W-5];\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] z_flatten[0:COUT*(H-4)*(W-4)-1];\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] z_fc[0:OUT-1];\n")
OUTPUT_FILE.write("	output [WIDTH-1:0] z;\n")
OUTPUT_FILE.write("	\n")
OUTPUT_FILE.write("	genvar h,i,j,k;\n")
OUTPUT_FILE.write("	generate\n")
OUTPUT_FILE.write("		for (h = 0; h < C; h++) begin\n")
OUTPUT_FILE.write("			for (i = 0; i < H; i++) begin\n")
OUTPUT_FILE.write("				demultiplexer_1d #(.WIDTH(WIDTH), .MAX(W)) demux(.x(x), .clk(clk), .en(en_in[h][i]), .z(xx[h][i]));\n")
OUTPUT_FILE.write("			end\n")
OUTPUT_FILE.write("		end\n")
OUTPUT_FILE.write("	endgenerate\n")
OUTPUT_FILE.write("	generate\n")
OUTPUT_FILE.write("		for (h = 0; h < CIN; h++) begin\n")
OUTPUT_FILE.write("			for (i = 0; i < H; i++) begin\n")
OUTPUT_FILE.write("				for (j = 0; j < W; j++) begin\n")
OUTPUT_FILE.write("					register_n #(.N(WIDTH)) reg_in(.clk(clk), .reg_e(ctrl), .reg_in(xx[h][i][j]), .reg_out(x_conv[h][i][j]));\n")
OUTPUT_FILE.write("				end\n")
OUTPUT_FILE.write("			end\n")
OUTPUT_FILE.write("		end\n")
OUTPUT_FILE.write("	endgenerate\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("	pack_conv #(.WIDTH(WIDTH), .W(W), .H(H), .CIN(CIN), .COUT(COUT), .F(F)) pack_conv(.x(xx), .z(zz), .clk(clk), .ctrl(ctrl));\n")
OUTPUT_FILE.write("	generate\n")
OUTPUT_FILE.write("		for (i = 0; i < COUT; i++) begin\n")
OUTPUT_FILE.write("			for (j = 0; j < H-4; j++) begin\n")
OUTPUT_FILE.write("				for (k = 0; k < W-4; k++) begin\n")
OUTPUT_FILE.write("					assign z_flatten[i*(W-4)*(H-4)+j*(W-4)+k] = zz[i][j][k];\n")
OUTPUT_FILE.write("				end\n")
OUTPUT_FILE.write("			end\n")
OUTPUT_FILE.write("		end\n")
OUTPUT_FILE.write("	endgenerate\n")
OUTPUT_FILE.write("	pack_fc #(.WIDTH(WIDTH)) pack_fc(.x(xx), .z(zz), .clk(clk), .ctrl(ctrl));\n")
OUTPUT_FILE.write("	generate\n")
OUTPUT_FILE.write("		for (i = 0; i < OUT; i++) begin\n")
OUTPUT_FILE.write("			register_n #(.N(WIDTH)) reg_out(.clk(clk), .reg_e(1'b1), .reg_in(zz[i]), .reg_out(z[i]));\n")
OUTPUT_FILE.write("		end\n")
OUTPUT_FILE.write("	endgenerate\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("	multiplexer_1d #(.WIDTH(WIDTH*2+$clog2(MID1)), .MAX(OUT)) mux(.x(zz), .clk(clk), .en(en_out), .z(z));\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("endmodule\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("module pack_conv\n")
OUTPUT_FILE.write("	#(parameter WIDTH = 8)\n")
OUTPUT_FILE.write("	(x, z, clk, ctrl);\n")
OUTPUT_FILE.write("	localparam W = 28, H = 28, CIN = 1, CMID = 6, COUT = 16, F = 5;\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("	input clk, ctrl;\n")
OUTPUT_FILE.write("	input [WIDTH-1:0] x[0:CIN-1][0:H-1][0:W-1];\n")
OUTPUT_FILE.write("	output [WIDTH-1:0] z[0:COUT-1][0:(H-4)/2-1][0:(W-4)/2-1];\n")
OUTPUT_FILE.write("	logic [WIDTH*2+$clog2(CIN*F*F)-1:0] z_L1[0:COUT-1][0:H-5][0:W-5];\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] x_L2[0:COUT-1][0:H-5][0:W-5];\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] x_L3[0:COUT-1][0:(H-5)/2][0:(W-5)/2];\n")
OUTPUT_FILE.write("	logic [WIDTH*2+$clog2(CIN*F*F)-1:0] z_L3[0:COUT-1][0:(H-4)/2-1][0:(W-4)/2-1];\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] x_L4[0:COUT-1][0:(H-4)/2-1][0:(W-4)/2-1];\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] z_L4[0:COUT-1][0:(H-4)/2-1][0:(W-4)/2-1];\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("	genvar h, i, j, k;\n")
OUTPUT_FILE.write("	conv2d_L1_top #(.WIDTH(WIDTH), .W(28), .H(28), .CIN(1), .COUT(6), .F(F)) conv_l1(.x(x), .z(z_L1));\n")
OUTPUT_FILE.write("	maxpool_top #(.WIDTH(WIDTH), .W(24), .H(24), .C(6)) maxpool_L2(.x(x_L2), .z(z_L2));\n")
OUTPUT_FILE.write("	conv2d_L3_top #(.WIDTH(WIDTH), .W(12), .H(12), .CIN(6), .COUT(16), .F(F)) conv_L3(.x(x_L3), .z(z_L3));\n")
OUTPUT_FILE.write("	maxpool_top #(.WIDTH(WIDTH), .W(8), .H(8), .C(16)) maxpool_L4(.x(x_L4), .z(z_L4));\n")
OUTPUT_FILE.write("	assign z = z_L4;\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("	genvar i,j,k;\n")
OUTPUT_FILE.write("	generate\n")
OUTPUT_FILE.write("		for (i = 0; i < A; i++) begin\n")
OUTPUT_FILE.write("			for (j = 0; j < A; j++) begin\n")
OUTPUT_FILE.write("				for (k = 0; k < A; k++) begin\n")
OUTPUT_FILE.write("					assign x_L2[i] = z_L1[i][j][k][WIDTH*2+$clog2(CIN*F*F)-1:WIDTH+$clog2(CIN*F*F)+1];\n")
OUTPUT_FILE.write("				end\n")
OUTPUT_FILE.write("			end\n")
OUTPUT_FILE.write("		end\n")
OUTPUT_FILE.write("	endgenerate\n")
OUTPUT_FILE.write("	generate\n")
OUTPUT_FILE.write("		for (i = 0; i < A; i++) begin\n")
OUTPUT_FILE.write("			for (j = 0; j < A; j++) begin\n")
OUTPUT_FILE.write("				for (k = 0; k < A; k++) begin\n")
OUTPUT_FILE.write("					assign x_L4[i] = z_L3[i][j][k][WIDTH*2+$clog2(CIN*F*F)-1:WIDTH+$clog2(CIN*F*F)+1];\n")
OUTPUT_FILE.write("				end\n")
OUTPUT_FILE.write("			end\n")
OUTPUT_FILE.write("		end\n")
OUTPUT_FILE.write("	endgenerate\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("endmodule\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("module pack_fc\n")
OUTPUT_FILE.write("	#(parameter WIDTH = 8)\n")
OUTPUT_FILE.write("	(x, z, clk, ctrl);\n")
OUTPUT_FILE.write("	localparam IN = 256, OUT = 10, MID1 = 84, MID2 = 84;\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("	input clk, ctrl;\n")
OUTPUT_FILE.write("	input [WIDTH-1:0] x[0:IN-1];\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] xx[0:IN-1];\n")
OUTPUT_FILE.write("	//input integer sel0, sel1;\n")
OUTPUT_FILE.write("	output [WIDTH-1:0] z[0:OUT-1];\n")
OUTPUT_FILE.write("	logic [WIDTH*2+$clog2(MID1)-1:0] z_L5[0:OUT-1];\n")
OUTPUT_FILE.write("	logic [WIDTH*2+$clog2(MID1)-1:0] z_L6[0:OUT-1];\n")
OUTPUT_FILE.write("	logic [WIDTH*2+$clog2(MID1)-1:0] z_L7[0:OUT-1];\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] x_L6[0:OUT-1];\n")
OUTPUT_FILE.write("	logic [WIDTH-1:0] x_L7[0:OUT-1];\n")
OUTPUT_FILE.write("\n")
OUTPUT_FILE.write("	fc256_128 fc_L5(.x(xx), .z(z_L5));\n")
OUTPUT_FILE.write("	fc128_84 fc_L6(.x(x_L6), .z(z_L6));\n")
OUTPUT_FILE.write("	fc84_10 fc_l7(.x(x_L7), .z(z_L7));\n")
OUTPUT_FILE.write("	genvar i;\n")
OUTPUT_FILE.write("	generate\n")
OUTPUT_FILE.write("		for (i = 0; i < A; i++) begin\n")
OUTPUT_FILE.write("			assign x_L6[i] = z_L5[i][WIDTH*2+$clog2(MID1)-1:WIDTH+$clog2(MID1)+1];\n")
OUTPUT_FILE.write("		end\n")
OUTPUT_FILE.write("	endgenerate\n")
OUTPUT_FILE.write("	generate\n")
OUTPUT_FILE.write("		for (i = 0; i < A; i++) begin\n")
OUTPUT_FILE.write("			assign x_L7[i] = z_L6[i][WIDTH*2+$clog2(MID1)-1:WIDTH+$clog2(MID1)+1];\n")
OUTPUT_FILE.write("		end\n")
OUTPUT_FILE.write("	endgenerate\n")
OUTPUT_FILE.write("	generate\n")
OUTPUT_FILE.write("		for (i = 0; i < A; i++) begin\n")
OUTPUT_FILE.write("			assign z[i] = z_L7[i][WIDTH*2+$clog2(MID1)-1:WIDTH+$clog2(MID1)+1];\n")
OUTPUT_FILE.write("		end\n")
OUTPUT_FILE.write("	endgenerate\n")
OUTPUT_FILE.write("endmodule\n")
